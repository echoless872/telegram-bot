# telegram_bot.py
# ‡¶™‡ßç‡¶∞‡ßü‡ßã‡¶ú‡¶®‡ßÄ‡ßü ‡¶≤‡¶æ‡¶á‡¶¨‡ßç‡¶∞‡ßá‡¶∞‡¶ø: python-telegram-bot==13.15
import sqlite3
from telegram import (
    Bot,
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ParseMode
)
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackQueryHandler,
    ConversationHandler,
    CallbackContext
)

# ================== CONFIG ==================
import os
BOT_TOKEN = os.getenv("8348921131:AAG0vvK9QRArrV7L5OUNbLx5xMhvfk-pl_E")   # <<=== ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ Telegram Bot API ‡¶ü‡ßã‡¶ï‡ßá‡¶® ‡¶¶‡¶ø‡¶® (‡¶π‡¶æ‡¶á‡¶≤‡¶æ‡¶á‡¶ü)
ADMIN_TELEGRAM_ID = None  # ‡¶Ø‡¶¶‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶è‡¶ï ‡¶¨‡ßç‡¶Ø‡¶ï‡ßç‡¶§‡¶ø‡¶á ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶¨‡ßá, ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶§‡¶æ‡¶Å‡¶∞ Telegram ID ‡¶¶‡¶ø‡¶® (int). ‡¶®‡¶æ ‡¶¶‡¶ø‡¶≤‡ßá None (‡¶∏‡¶¨‡¶æ‡¶á ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá)
WHATSAPP_NUMBER = "01940212417"  # ‡¶™‡ßç‡¶∞‡¶¶‡¶∞‡ßç‡¶∂‡¶®‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞
WHATSAPP_COUNTRY_PREFIX = "88"   # ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ‡¶¶‡ßá‡¶∂‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø 88, wa.me ‡¶§‡ßà‡¶∞‡¶ø‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡¶¨‡ßá
CONTACT_EMAIL = "apexstore49@gmail.com"
# ============================================

# Conversation states
ASK_NAME = 1

# ==== Database helper ====
conn = sqlite3.connect("bot_data.db", check_same_thread=False)
c = conn.cursor()
c.execute("""
CREATE TABLE IF NOT EXISTS users (
    telegram_id INTEGER PRIMARY KEY,
    name TEXT UNIQUE
)
""")
c.execute("""
CREATE TABLE IF NOT EXISTS products (
    name TEXT PRIMARY KEY
)
""")
conn.commit()

# ==== Helper functions ====
def add_user(telegram_id: int, name: str) -> (bool, str):
    """‡¶∞‡¶ø‡¶ü‡¶æ‡¶∞‡ßç‡¶® (success, message)"""
    try:
        c.execute("INSERT INTO users (telegram_id, name) VALUES (?, ?)", (telegram_id, name))
        conn.commit()
        return True, "‡¶Ö‡¶≠‡¶ø‡¶®‡¶®‡ßç‡¶¶‡¶® ‚Äî ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§"
    except sqlite3.IntegrityError as e:
        # ‡¶®‡¶æ‡¶Æ ‡¶Ö‡¶•‡¶¨‡¶æ telegram_id conflict
        # ‡¶¶‡ßá‡¶ñ‡ßá ‡¶®‡ßá‡¶á ‡¶Ø‡¶¶‡¶ø ‡¶è‡¶ï‡¶á ‡¶®‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá
        c.execute("SELECT telegram_id FROM users WHERE name = ?", (name,))
        row = c.fetchone()
        if row:
            return False, "‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶®‡ßá‡ßü‡¶æ ‡¶Ü‡¶õ‡ßá ‚Äî ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®‡•§"
        # ‡¶Ö‡¶®‡ßç‡¶Ø ‡¶ï‡ßã‡¶®‡ßã ‡¶ï‡¶®‡¶´‡ßç‡¶≤‡¶ø‡¶ï‡ßç‡¶ü
        return False, "‡¶è‡¶ï‡¶æ‡¶â‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø ‚Äî ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡ßü ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§"

def add_product_db(name: str) -> (bool, str):
    try:
        c.execute("INSERT INTO products (name) VALUES (?)", (name,))
        conn.commit()
        return True, "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"
    except sqlite3.IntegrityError:
        return False, "‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ü‡¶õ‡ßá‡•§"

def remove_product_db(name: str) -> (bool, str):
    c.execute("DELETE FROM products WHERE name = ?", (name,))
    conn.commit()
    if c.rowcount:
        return True, "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá‡•§"
    else:
        return False, "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§"

def list_products():
    c.execute("SELECT name FROM products ORDER BY name")
    return [r[0] for r in c.fetchall()]

# ==== Bot handlers ====
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    # ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá ‡¶Ü‡¶õ‡ßá ‡¶ï‡¶ø ‡¶®‡¶æ
    c.execute("SELECT name FROM users WHERE telegram_id = ?", (user.id,))
    row = c.fetchone()
    if row:
        name = row[0]
        update.message.reply_text(
            f"‡¶Ü‡¶∏‡¶∏‡¶æ‡¶≤‡¶æ‡¶Æ‡ßÅ ‡¶Ü‡¶≤‡¶æ‡¶á‡¶ï‡ßÅ‡¶Æ, {name}!\n\n‡¶®‡ßÄ‡¶ö‡ßá‡¶∞ ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    # ‡¶®‡¶§‡ßÅ‡¶® ‚Äî ‡¶®‡¶æ‡¶Æ ‡¶ö‡¶æ‡¶á
    update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶®‡¶æ‡¶Æ ‡¶≤‡¶ø‡¶ñ‡ßá ‡¶¶‡¶ø‡¶® (‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡¶ü‡¶ø ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá):")
    return ASK_NAME

def ask_name(update: Update, context: CallbackContext):
    user = update.effective_user
    name = update.message.text.strip()
    if not name:
        update.message.reply_text("‡¶®‡¶æ‡¶Æ ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡ßü‡ßá‡¶õ‡ßá ‚Äî ‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®:")
        return ASK_NAME
    success, msg = add_user(user.id, name)
    update.message.reply_text(msg)
    if success:
        update.message.reply_text("‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ:", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    else:
        # ‡¶Ø‡¶¶‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶®‡ßá‡¶¨‡ßá ‡¶®‡¶æ, ‡¶™‡ßÅ‡¶®‡¶∞‡¶æ‡¶Ø‡¶º ‡¶ö‡¶æ‡¶á
        update.message.reply_text("‡¶Ö‡¶®‡ßç‡¶Ø ‡¶è‡¶ï‡¶ü‡¶ø ‡¶®‡¶æ‡¶Æ ‡¶¶‡¶ø‡¶®:")
        return ASK_NAME

def main_menu_keyboard():
    kb = [
        [KeyboardButton("Products üîò"), KeyboardButton("Contact Email üîò")]
    ]
    return ReplyKeyboardMarkup(kb, resize_keyboard=True)

def text_message_router(update: Update, context: CallbackContext):
    text = update.message.text.strip().lower()
    if text.startswith("products"):
        show_products(update, context)
    elif text.startswith("contact"):
        # Email ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã
        update.message.reply_text(f"‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶á‡¶Æ‡ßá‡¶á‡¶≤: {CONTACT_EMAIL}")
    else:
        update.message.reply_text("‡¶¨‡ßÅ‡¶ù‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶ø‡¶®‡¶ø‡•§ ‡¶™‡ßç‡¶∞‡¶ß‡¶æ‡¶® ‡¶Æ‡ßá‡¶®‡ßÅ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶õ‡ßá ‡¶®‡¶ø‡¶®:", reply_markup=main_menu_keyboard())

def show_products(update: Update, context: CallbackContext):
    products = list_products()
    if not products:
        update.message.reply_text("‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶™‡¶æ‡¶ì‡ßü‡¶æ ‡¶Ø‡¶æ‡ßü‡¶®‡¶ø‡•§ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® /addproduct ‡¶¶‡¶ø‡ßü‡ßá ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")
        return
    keyboard = []
    for p in products:
        # ‡¶™‡ßç‡¶∞‡¶§‡¶ø‡¶ü‡¶ø ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø callback_data 'prod::<name>'
        keyboard.append([InlineKeyboardButton(p, callback_data=f"prod::{p}")])
    reply = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("‡¶™‡¶õ‡¶®‡ßç‡¶¶‡ßá‡¶∞ ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=reply)

def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()
    data = query.data
    if data.startswith("prod::"):
        prod_name = data.split("::", 1)[1]
        # WhatsApp message link
        wa_number_full = WHATSAPP_COUNTRY_PREFIX + WHATSAPP_NUMBER.lstrip("0")
        # Prepare message (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ)
        msg = (
            f"‡¶Ü‡¶™‡¶®‡¶ø *{prod_name}* ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßá‡¶õ‡ßá‡¶®‡•§\n\n"
            f"‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®:\n"
            f"+{WHATSAPP_COUNTRY_PREFIX}{WHATSAPP_NUMBER}\n\n"
            "‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶è‡¶á ‡¶®‡¶æ‡¶Æ‡ßç‡¶¨‡¶æ‡¶∞‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®"
        )
        # Send message with clickable wa.me link
        wa_link = f"https://wa.me/{wa_number_full}?text=Hello%20I%20am%20interested%20in%20{prod_name.replace(' ', '%20')}"
        query.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN)
        query.message.reply_text(f"WhatsApp ‡¶≤‡¶ø‡¶Ç‡¶ï: {wa_link}")
    else:
        query.message.reply_text("Unknown action.")

# ==== Admin commands ====
def addproduct_cmd(update: Update, context: CallbackContext):
    user = update.effective_user
    # ‡¶Ø‡¶¶‡¶ø ADMIN_TELEGRAM_ID ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶•‡¶æ‡¶ï‡ßá, ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶ø
    if ADMIN_TELEGRAM_ID and user.id != ADMIN_TELEGRAM_ID:
        update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    args = context.args
    if not args:
        update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /addproduct ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü-‡¶®‡¶æ‡¶Æ")
        return
    name = " ".join(args).strip()
    ok, msg = add_product_db(name)
    update.message.reply_text(msg)

def removeproduct_cmd(update: Update, context: CallbackContext):
    user = update.effective_user
    if ADMIN_TELEGRAM_ID and user.id != ADMIN_TELEGRAM_ID:
        update.message.reply_text("‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶Æ‡¶§‡¶ø ‡¶®‡ßá‡¶á‡•§")
        return
    args = context.args
    if not args:
        update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /removeproduct ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü-‡¶®‡¶æ‡¶Æ")
        return
    name = " ".join(args).strip()
    ok, msg = remove_product_db(name)
    update.message.reply_text(msg)

def listproducts_cmd(update: Update, context: CallbackContext):
    products = list_products()
    if not products:
        update.message.reply_text("‡¶ï‡ßã‡¶®‡ßã ‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶®‡ßá‡¶á‡•§")
    else:
        text = "‡¶™‡ßç‡¶∞‡ßã‡¶°‡¶æ‡¶ï‡ßç‡¶ü ‡¶§‡¶æ‡¶≤‡¶ø‡¶ï‡¶æ:\n" + "\n".join(f"- {p}" for p in products)
        update.message.reply_text(text)

def error_handler(update: Update, context: CallbackContext):
    # simple error logging
    print("Error:", context.error)

def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher

    # Conversation for /start -> ask name
    conv = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            ASK_NAME: [MessageHandler(Filters.text & ~Filters.command, ask_name)]
        },
        fallbacks=[]
    )
    dp.add_handler(conv)

    # Text router for menu
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, text_message_router))

    # Callback query handler (product buttons)
    dp.add_handler(CallbackQueryHandler(button_callback))

    # Admin product commands
    dp.add_handler(CommandHandler("addproduct", addproduct_cmd, pass_args=True))
    dp.add_handler(CommandHandler("removeproduct", removeproduct_cmd, pass_args=True))
    dp.add_handler(CommandHandler("listproducts", listproducts_cmd))

    dp.add_error_handler(error_handler)

    print("Bot started...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
